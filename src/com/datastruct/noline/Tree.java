package com.datastruct.noline;
/**
 * 树：
 *    树结构是一种描述非线性层次关系的数据结构。树是n个数据结点的集合，在该集合中包含一个根结点，根结点之下分布着一些互不交叉的子集合
 * 这些子集合也就是根结点的子树。
 * 
 *    树结构的特征
 *      在一个树结构中，有且仅有一个结点没有直接前驱，这个结点就是树的根结点
 *      除根结点外，其余每个结点有且仅有一个直接前驱
 *      每个结点可以有任意多个直接后继
 *      
 *    父结点和子结点：每个结点的子树的根称为该结点的子结点，相应地，该结点被称为子结点的父结点。
 *    兄弟结点：具有同一父结点的结点成为兄弟结点
 *    结点的度：一个结点所包含子树的数量
 *    树的度：是指该树所有结点中最大的度
 *    叶结点：树中度为零的结点称为叶结点或终端结点
 *    分支结点：树中度不为零的结点称为分支结点或非终端结点
 *    结点的层数：结点的层数从树根开始计算，根结点为第1层，依次向下为2，3....,n层。
 *    树的深度：树中结点的最大层数称为树的深度
 *    有序树：若树中各结点的子树（兄弟结点）是按一定次序从左到右排列的
 *    无序树：若树中各结点的子树（兄弟结点）是未按一定次序排列的
 *    森林：n（n > 0）颗互不相交的树的集合
 *    
 *    树的表示
 *      一般来说，常采用层次括号法。层次括号法的基本规则如下：
 *          根结点放入一对圆括号中
 *          根结点的子树由左至右的顺序放入括号中
 *          对子树做上述相同的处理
 *          这样，同层子树与它的根结点用圆括号括起来，同层子树之间用逗号隔开，最后用闭括号括起来。
 *          
 *          
 *  二叉树
 *       在树结构中，二叉树是最简单的一种形式，描述性对简单，处理也相对简单，而且更为重要的是任意的树都可以转换成对应的二叉树。
 *       二叉树是树结构的一种特殊形式，其中n个结点的集合，每个结点最多只能有两个子结点。二叉树的子树仍然是二叉树。二叉树的一
 *个结点上对应的两个子树分别称为左子树和右子树，由于子树有左右之分，因此二叉树是有序树。为了便于研究，二叉树还可以进一步细分为
 *两种特殊的类型，满二叉数和完全二叉数
 *       
 *       满二叉树：除最下一层的叶结点外，每层的结点都有两个子结点
 *       完全二叉树：在二叉树中除二叉树最后一层外，其他个层的结点都达到最大个数，且最后一层叶结点按照从左向右的顺序连续存在，只
 *缺最后一层右侧若干结点
 *
 *       完全二叉树的性质
 *          对于完全二叉树，如果树中包含n个结点，假设这些结点按照顺序方式存储，那么，对于任意一个结点m来说，具有如下性质：
 *              如果m!= 1,则结点m的父结点的编号为m/2;
 *              如果2*m<=n,则结点m的左子树根结点的编号为2*m；若2*m>n,则无左子树，进一步也就没有右子树。
 *              如果2*m +1<=n,则结点m的右子树根结点编号为2*m+1;若2*m+1>n,则无右子树。另外，对于该完全二叉数来说，其深度为log2n+1;
 *              
 *       按照数据的存储方式，树结构可以分为顺序存储和链式存储。
 *       
 *       顺序存储
 *          顺序存储方式是最基本的数据存储方式，与线性表类似，树结构的顺序存储一般也是采用一维数组来表示。这里的关键是定义合适的次序来
 *存放树中的各个层次的数据。如果采用顺序存储方式，我们可以将其按层来存储。即先存储根结点，然后从左至右依次存储下一层结点的数据，...直到
 *所有的结点数据完全存储。
 *
 *       顺序存储二叉树
 *       //最大结点数
 *       static final int MAXLEN = 100;
 *       //保存二叉树数组
 *       char[] seqBinTree = new char[MAXLEN];
 *       
 *       顺序存储方式一般只适用于完全二叉树的情况，对于更为一般的情况，一般建议采用链式存储方法
 *       
 *       链式存储
 *          与线性结构的链式存储类似，二叉树的链式存储包含结点元素以及分别指向左子树和右子树的引用。
 *          
 *       class ChainTreeType{
 *          //元素数据
 *          char NodeData;
 *          //左子树结点引用
 *          ChainTree LSonNode;
 *          //右子树结点引用
 *          ChainTree RSonNode;
 *          //父结点引用
 *          Chain ParentNode;
 *       }
 *       
 *       //定义二叉树根结点引用
 *       ChainTreeType root = null;
 */

//
class CBTType {
    //最大长度
    static final int MAXLEN = 20;
    //ADT
    String mData;
    //左子树结点引用
    CBTType mLeft;
    //右子树结点引用
    CBTType mRight;
}



public class Tree {

    public static void main(String[] args) {
    }

}
